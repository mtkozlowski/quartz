<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>courses/ArchitekturaNaFroncie on</title><link>https://mtkozlowski.github.io/quartz/tags/courses/ArchitekturaNaFroncie/</link><description>Recent content in courses/ArchitekturaNaFroncie on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://mtkozlowski.github.io/quartz/tags/courses/ArchitekturaNaFroncie/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://mtkozlowski.github.io/quartz/1.-Permament-notes/Polimorfizm-interfejs%C3%B3w/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/1.-Permament-notes/Polimorfizm-interfejs%C3%B3w/</guid><description>Polimorfizm interfejsów Jeżeli interfejs dziedziczy po innym interfejsie (rozszrza go) to do zmiennej typu bazowego możemy przypisać zmienne typów pochodnych, jednak będziemy mogli korzsytać jedynie z pól i metod dostępnych w bazowym interfejsie.</description></item><item><title/><link>https://mtkozlowski.github.io/quartz/1.-Permament-notes/Unie-dyskryminacyjne-w-Typescript/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/1.-Permament-notes/Unie-dyskryminacyjne-w-Typescript/</guid><description>Unie dyskryminacyjne w Typescript Jak wspomniałem [[Unia i przecięcie typów w Typescript]], kompilator jest w stanie zagwarantować to, czego jest pewny po unii typów (zanim rozstrzygnie z którym dokładnie typem ma doczynienia).</description></item><item><title/><link>https://mtkozlowski.github.io/quartz/0.-Hub-notes/Architektura-na-froncie/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/0.-Hub-notes/Architektura-na-froncie/</guid><description>Architektura na froncie 1 2 3 LIST from #courses/ArchitekturaNaFroncie WHERE file.name != &amp;#34;Architektura na froncie&amp;#34; SORT file.name ASC</description></item><item><title/><link>https://mtkozlowski.github.io/quartz/1.-Permament-notes/Unia-i-przeci%C4%99cie-typ%C3%B3w-w-Typescript/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/1.-Permament-notes/Unia-i-przeci%C4%99cie-typ%C3%B3w-w-Typescript/</guid><description>Unia i przecięcie typów w Typescript Typy w Typescript można połączyć na dwa sposoby
w unię w przecięcie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 interface Human { name: string } declare let someone: Human interface Developer extends Human { languages: string[] } declare let developer: Developer interface Psychologist extends Human { askUncomfortableQuestion(): void } declare let psychologist: Psychologist type DeveloperORPsychologist = Developer | Psychologist type DeveloperANDPsychologist = Developer &amp;amp; Psychologist Typy określają wymagania jakie stawia zmienna podczas próby przypisania do niej wartości dlatego:</description></item><item><title/><link>https://mtkozlowski.github.io/quartz/2.-Literature-notes/Boolean-obsession/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/2.-Literature-notes/Boolean-obsession/</guid><description>Boolean obsession 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // mamy jakieś tamm dane.</description></item><item><title/><link>https://mtkozlowski.github.io/quartz/2.-Literature-notes/Primitive-obsession/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/2.-Literature-notes/Primitive-obsession/</guid><description>Primitive obsession Nadużywanie typów prymitywnych sprawia, że np. wszystkie liczby w aplikacji są ze sobą kompatybilne, co sprawia, że:
możemy dodać do siebie pieniądze i liczbę kół w aucie możemy pomnożyć ze sobą dwie zmienne przechowywujące pieniądz i otrzymać w teorii $pieniądz^2$ i inne babole Rozwiązanie: Do wyboru mamy dwa rozwiązania</description></item><item><title/><link>https://mtkozlowski.github.io/quartz/2.-Literature-notes/Typy-generyczne/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://mtkozlowski.github.io/quartz/2.-Literature-notes/Typy-generyczne/</guid><description>Typy generyczne [[Architektura na froncie]]</description></item></channel></rss>